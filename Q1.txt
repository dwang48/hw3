Assume n is odd for the following questions for simplicity(since for n is even, there will be some complicated boundary terms like +1 and -1 for each thread):
(a)Ans: 
1ST FOR LOOP:
The first thread would take 1+2+3+…+(n-1)/2 = (n^2-1)/8.The second thread would take (n+1)/2+…+n-1 = 1/8*(n-1)(3n-1).

2ND FOR LOOP:
The first thread would take n-1+n-2+n-3+…+(n-1)/2= 1/8*(n-1)(3n-1).The second thread would take int(n-2/2)+…+1 = (n^2-1)/8. 
The waiting time during each for loop would be (n-1)^2/4. Since there are two for loops, the total waiting time would be (n-1)^2/2.


(b)Ans: If we use schedule (static,1), then we will assign f(1),f(3),f(5)...f(n-2) for thread 1 to compute and the rest for thread 2 to compute. For thread 1, the time it takes would be 1+3+5+7+...+n-2 = (n-1)^2/4. For thread 2, the time it takes would be 2+4+6+...+n-1 = 1/4*(n-1)(n+1). The time difference is (n-1)/2. Since we have two for loops, the total time difference is n-1 miliseconds. 

(c)Ans: If we use schedule (dynamic,1), then the os will automatically assign tasks to currently available threads. And thus this should improve the efficience and eliminate some waiting time comparing with previous answers.

(d)There is an OpenMP directive called omp for nowait. Under this directive, the code will have no waiting time since it automatically give the thread that has finished the work earlier more work to do. Since there are no waiting time theoretically, two threads thus complete the same amount of work in same amount of time, which is (1+n-1)*(n-1)/2 = (n^2- n)/2.
